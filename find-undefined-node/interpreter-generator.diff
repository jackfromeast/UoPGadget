diff --git a/src/interpreter/interpreter-generator.cc b/src/interpreter/interpreter-generator.cc
index 672ec482d4..d2c4a3e22e 100644
--- a/src/interpreter/interpreter-generator.cc
+++ b/src/interpreter/interpreter-generator.cc
@@ -531,17 +531,38 @@ IGNITION_HANDLER(GetNamedProperty, InterpreterAssembler) {
   };
   LazyNode<Context> lazy_context = [=] { return GetContext(); };
 
-  Label done(this);
+  // Label done(this);
+  // TVARIABLE(Object, var_result);
+  // ExitPoint exit_point(this, &done, &var_result);
+  
+  // lzy
+  Label done(this), checkUndefined(this), print_undefined(this);
   TVARIABLE(Object, var_result);
-  ExitPoint exit_point(this, &done, &var_result);
+  ExitPoint exit_point(this, &checkUndefined, &var_result);
 
   AccessorAssembler::LazyLoadICParameters params(lazy_context, recv, lazy_name,
                                                  lazy_slot, feedback_vector);
   AccessorAssembler accessor_asm(state());
   accessor_asm.LoadIC_BytecodeHandler(&params, &exit_point);
 
-  BIND(&done);
+  // lzy
+  BIND(&checkUndefined);
   {
+    Branch(IsUndefined(var_result.value()), &print_undefined, &done);
+  }
+
+  // lzy
+  BIND(&print_undefined);
+  {
+    Print("[+] Handled by src/interpreter/interpreter-generator.cc:IGNITION_HANDLER(GetNamedProperty, InterpreterAssembler) in &done");
+    Print("[+] KeyName:", LoadConstantPoolEntryAtOperandIndex(1));
+    Print("[+] Value:", var_result.value());
+
+    Goto(&done);
+  }
+
+  BIND(&done);
+  { 
     SetAccumulator(var_result.value());
     Dispatch();
   }
@@ -564,8 +585,29 @@ IGNITION_HANDLER(GetNamedPropertyFromSuper, InterpreterAssembler) {
   TNode<Object> result =
       CallBuiltin(Builtin::kLoadSuperIC, context, receiver,
                   home_object_prototype, name, slot, feedback_vector);
-  SetAccumulator(result);
-  Dispatch();
+
+  // lzy
+  Label done(this), print_undefined(this);
+  Branch(IsUndefined(result), &print_undefined, &done);
+
+  // lzy
+  BIND(&print_undefined);
+  {
+    Print("[+] Handled by src/interpreter/interpreter-generator.cc:IGNITION_HANDLER(GetNamedPropertyFromSuper, InterpreterAssembler)");
+    Print("[+] KeyName:", LoadConstantPoolEntryAtOperandIndex(1));
+    Print("[+] Value:", result);
+
+    Goto(&done);
+  }
+
+  BIND(&done);
+  { 
+    SetAccumulator(result);
+    Dispatch();
+  }
+  
+  // SetAccumulator(result);
+  // Dispatch();
 }
 
 // GetKeyedProperty <object> <slot>
@@ -582,8 +624,29 @@ IGNITION_HANDLER(GetKeyedProperty, InterpreterAssembler) {
   TVARIABLE(Object, var_result);
   var_result = CallBuiltin(Builtin::kKeyedLoadIC, context, object, name, slot,
                            feedback_vector);
-  SetAccumulator(var_result.value());
-  Dispatch();
+
+  // lzy
+  Label done(this), print_undefined(this);
+  Branch(IsUndefined(var_result.value()), &print_undefined, &done);
+
+  // lzy
+  BIND(&print_undefined);
+  {
+    Print("[+] Handled by src/interpreter/interpreter-generator.cc:IGNITION_HANDLER(GetKeyedProperty, InterpreterAssembler)");
+    Print("[+] KeyName:", name);
+    Print("[+] Value:", var_result.value());
+
+    Goto(&done);
+  }
+
+  BIND(&done);
+  { 
+    SetAccumulator(var_result.value());
+    Dispatch();
+  }
+
+  // SetAccumulator(var_result.value());
+  // Dispatch();
 }
 
 class InterpreterSetNamedPropertyAssembler : public InterpreterAssembler {
